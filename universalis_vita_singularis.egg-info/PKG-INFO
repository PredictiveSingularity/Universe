Metadata-Version: 2.1
Name: universalis-vita-singularis
Version: 0.0.0a1
Summary: Energy in All Space & Time is falling together towards the Singularity.
Home-page: https://github.com/PredictiveSingularity/Universe
Author: Danny Waser
License: LICENSE
Requires-Python: >=3.8,<4
Description-Content-Type: text/markdown
License-File: LICENSE

# Universe
Energy in All Space & Time is pulling together towards the Singularity.

This Python tool is built on top of Ursina Engine using Bullet-for-Ursina `physics3d` library. 

It provides an easy way to visualize the interaction of Energy trought Space and Time.

```python
# Import Singularity
from universe import *

# You can catch any input from here
def input(key):
    if any([
        held_keys['control'] and key == 'q',
        held_keys['control'] and key == 'x',
        key == 'q',
        key == 'escape',
    ]):
        print("[Q]uit -> User has ended the Simulation")
        application.quit()

# You can update anything from here
def update():
    global simulacre

    # print(f"This is an update at. {time.dt}")

def main():
    global simulacre

    # This is the Universe
    simulacre = Universe()

    # Define the Universe here.

    # Background Radiation
    cbr = CosmicBackgroundRadiation()

    # Our Sun
    sol = Sol()

    # Set us as observer
    observer = EditorCamera(parent=sol)

    # Everthing has been declared
    # The simulation of the Universe can be runned
    simulacre.run()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
```



## Build from source
Clone this repository.
```zsh
❯ git clone https://github.com/PredictiveSingularity/Universe.git ./Universe
```

Build `simulate` binary.
```zsh
❯ cd Universe/
❯ make build
❯ ls dist/
```
After you have built `simulate`, you can [install it](#installation).

Alternatively you could try to build for Windows using [Ursina's Build Engine](https://www.ursinaengine.org/building.html).

```
make windows
```

# Installation

Make sure you [build `simulate` first](#build-from-source)

```zsh
❯ file dist/simulate
❯ make install
❯ which simulate
❯ simulate --help
```

Then [start a simulating](#usage).

# Usage

Using `simulate`:

```zsh 
❯ simulate --help
usage: simulate [-h] [-v] [-u UNIVERSE] [-n NAME] [--debug DEBUG]

Simulate the Universe

options:
  -h, --help            show this help message and exit
  -v, --version         output version information and exit
  -u UNIVERSE, --universe UNIVERSE
                        Universe file to load and simulate.
  -n NAME, --name NAME  Universe name to load and simulate.
  --debug DEBUG         Set true to simulate with debug mode.

❯ simulate
```

Or have fun with [`simulate.py`](simulate.py).

Quckly update any parameter and see the results.

```zsh
❯ make simulation
# With parameters:
python simulate.py --help
```

Checkout [`simulations/`](simulations/) for ideas.

Or just run the default simulation.

```zsh
❯ make run
# With parameters:
❯ python -m universe --help
```
